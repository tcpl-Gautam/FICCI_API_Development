// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using FICCI_API.ModelsEF;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace FICCI_API.ModelsEF
{
    public partial class FICCI_DB_APPLICATIONSContext
    {
        private IFICCI_DB_APPLICATIONSContextProcedures _procedures;

        public virtual IFICCI_DB_APPLICATIONSContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new FICCI_DB_APPLICATIONSContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IFICCI_DB_APPLICATIONSContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<prc_Approval_CustomerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_Approval_InvoiceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_Configuration_DeleteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_Configuration_DetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_Configuration_FormResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_Configuration_listResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_drp_categorylistResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_EmployeeMaster_listResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_FICCI_IMUM_listResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_Role_listResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_UserMaster_DeleteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<prc_UserMaster_FormResult>().HasNoKey().ToView(null);
        }
    }

    public partial class FICCI_DB_APPLICATIONSContextProcedures : IFICCI_DB_APPLICATIONSContextProcedures
    {
        private readonly FICCI_DB_APPLICATIONSContext _context;

        public FICCI_DB_APPLICATIONSContextProcedures(FICCI_DB_APPLICATIONSContext context)
        {
            _context = context;
        }

        public virtual async Task<List<prc_Approval_CustomerResult>> prc_Approval_CustomerAsync(string CustomerId, bool? IsApprove, string LoginId, int? statusid, string Remarks, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerId",
                    Size = 50,
                    Value = CustomerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsApprove",
                    Value = IsApprove ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LoginId",
                    Size = -1,
                    Value = LoginId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusid",
                    Value = statusid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Remarks",
                    Size = -1,
                    Value = Remarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_Approval_CustomerResult>("EXEC @returnValue = [dbo].[prc_Approval_Customer] @CustomerId, @IsApprove, @LoginId, @statusid, @Remarks", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_Approval_InvoiceResult>> prc_Approval_InvoiceAsync(string HeaderId, bool? IsApprove, string LoginId, int? statusid, string Remarks, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "HeaderId",
                    Size = 50,
                    Value = HeaderId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsApprove",
                    Value = IsApprove ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LoginId",
                    Size = -1,
                    Value = LoginId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusid",
                    Value = statusid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Remarks",
                    Size = -1,
                    Value = Remarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_Approval_InvoiceResult>("EXEC @returnValue = [dbo].[prc_Approval_Invoice] @HeaderId, @IsApprove, @LoginId, @statusid, @Remarks", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_Configuration_DeleteResult>> prc_Configuration_DeleteAsync(int? C_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "C_ID",
                    Value = C_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_Configuration_DeleteResult>("EXEC @returnValue = [dbo].[prc_Configuration_Delete] @C_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_Configuration_DetailResult>> prc_Configuration_DetailAsync(int? C_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "C_ID",
                    Value = C_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_Configuration_DetailResult>("EXEC @returnValue = [dbo].[prc_Configuration_Detail] @C_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_Configuration_FormResult>> prc_Configuration_FormAsync(bool? IsUpdate, int? C_ID, string C_Code, string C_Value, int? CategoryID, string User, bool? IsActive, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IsUpdate",
                    Value = IsUpdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "C_ID",
                    Value = C_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "C_Code",
                    Size = 100,
                    Value = C_Code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "C_Value",
                    Size = 100,
                    Value = C_Value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 100,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsActive",
                    Value = IsActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_Configuration_FormResult>("EXEC @returnValue = [dbo].[prc_Configuration_Form] @IsUpdate, @C_ID, @C_Code, @C_Value, @CategoryID, @User, @IsActive", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_Configuration_listResult>> prc_Configuration_listAsync(int? C_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "C_ID",
                    Value = C_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_Configuration_listResult>("EXEC @returnValue = [dbo].[prc_Configuration_list] @C_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_drp_categorylistResult>> prc_drp_categorylistAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_drp_categorylistResult>("EXEC @returnValue = [dbo].[prc_drp_categorylist]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_EmployeeMaster_listResult>> prc_EmployeeMaster_listAsync(int? IMEM_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IMEM_ID",
                    Value = IMEM_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_EmployeeMaster_listResult>("EXEC @returnValue = [dbo].[prc_EmployeeMaster_list] @IMEM_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_FICCI_IMUM_listResult>> prc_FICCI_IMUM_listAsync(int? IMUM_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IMUM_ID",
                    Value = IMUM_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_FICCI_IMUM_listResult>("EXEC @returnValue = [dbo].[prc_FICCI_IMUM_list] @IMUM_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_Role_listResult>> prc_Role_listAsync(int? Role_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Role_id",
                    Value = Role_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_Role_listResult>("EXEC @returnValue = [dbo].[prc_Role_list] @Role_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_UserMaster_DeleteResult>> prc_UserMaster_DeleteAsync(int? IMUM_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IMUM_ID",
                    Value = IMUM_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_UserMaster_DeleteResult>("EXEC @returnValue = [dbo].[prc_UserMaster_Delete] @IMUM_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<prc_UserMaster_FormResult>> prc_UserMaster_FormAsync(bool? IsUpdate, string IMUM_EMPID, int? IMUM_ID, string IMUM_NAME, string IMUM_EMAIL, int? RoleID, bool? IMUM_ACTIVE, string Username, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IsUpdate",
                    Value = IsUpdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IMUM_EMPID",
                    Size = 100,
                    Value = IMUM_EMPID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IMUM_ID",
                    Value = IMUM_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IMUM_NAME",
                    Size = 100,
                    Value = IMUM_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IMUM_EMAIL",
                    Size = 100,
                    Value = IMUM_EMAIL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RoleID",
                    Value = RoleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IMUM_ACTIVE",
                    Value = IMUM_ACTIVE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Username",
                    Size = 50,
                    Value = Username ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prc_UserMaster_FormResult>("EXEC @returnValue = [dbo].[prc_UserMaster_Form] @IsUpdate, @IMUM_EMPID, @IMUM_ID, @IMUM_NAME, @IMUM_EMAIL, @RoleID, @IMUM_ACTIVE, @Username", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
