// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace FICCI_API.ModelsEF;

public partial class FICCI_DB_APPLICATIONSContext : DbContext
{
    public FICCI_DB_APPLICATIONSContext(DbContextOptions<FICCI_DB_APPLICATIONSContext> options)
        : base(options)
    {
    }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<CoaMaster> CoaMasters { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Erpcustomer> Erpcustomers { get; set; }

    public virtual DbSet<FicciErpCustomerDetail> FicciErpCustomerDetails { get; set; }

    public virtual DbSet<FicciErpProjectDetail> FicciErpProjectDetails { get; set; }

    public virtual DbSet<FicciImad> FicciImads { get; set; }

    public virtual DbSet<FicciImem> FicciImems { get; set; }

    public virtual DbSet<FicciImm> FicciImms { get; set; }

    public virtual DbSet<FicciImmd> FicciImmds { get; set; }

    public virtual DbSet<FicciImpiHeader> FicciImpiHeaders { get; set; }

    public virtual DbSet<FicciImpiLine> FicciImpiLines { get; set; }

    public virtual DbSet<FicciImum> FicciImums { get; set; }

    public virtual DbSet<FicciImwd> FicciImwds { get; set; }

    public virtual DbSet<GstCustomerType> GstCustomerTypes { get; set; }

    public virtual DbSet<Gstgroup> Gstgroups { get; set; }

    public virtual DbSet<Hsnsac> Hsnsacs { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<PostCode> PostCodes { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<StatusMaster> StatusMasters { get; set; }

    public virtual DbSet<TblCategoryList> TblCategoryLists { get; set; }

    public virtual DbSet<TblConfigurationMaster> TblConfigurationMasters { get; set; }

    public virtual DbSet<TblFicciRole> TblFicciRoles { get; set; }

    public virtual DbSet<Userloginlog> Userloginlogs { get; set; }

    public virtual DbSet<VwCustomerApprovalList> VwCustomerApprovalLists { get; set; }

    public virtual DbSet<VwInvoiceApprovalList> VwInvoiceApprovalLists { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<City>(entity =>
        {
            entity.HasKey(e => e.CityId).HasName("PK__City__F2D21B764DF52E26");

            entity.ToTable("City");

            entity.Property(e => e.CityCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CityName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<CoaMaster>(entity =>
        {
            entity.HasKey(e => e.CoaId).HasName("PK__COA_Mast__B09E7793D1201498");

            entity.ToTable("COA_Master");

            entity.Property(e => e.CoaId).HasColumnName("COA_Id");
            entity.Property(e => e.CoaName)
                .IsUnicode(false)
                .HasColumnName("COA_Name");
            entity.Property(e => e.CoaNo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COA_No");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.CountryId).HasName("PK__Country__10D1609FA65946D7");

            entity.ToTable("Country");

            entity.HasIndex(e => e.CountryCode, "UQ__Country__E056F2016C6A65CA").IsUnique();

            entity.Property(e => e.CountryCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountryName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<Erpcustomer>(entity =>
        {
            entity.HasKey(e => e.CustId).HasName("PK__ERPCusto__049E3AA96CEA6AA9");

            entity.ToTable("ERPCustomer");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountryRegionCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Country_Region_Code");
            entity.Property(e => e.CustAddress).IsUnicode(false);
            entity.Property(e => e.CustAddress2).IsUnicode(false);
            entity.Property(e => e.CustName).IsUnicode(false);
            entity.Property(e => e.CustName2).IsUnicode(false);
            entity.Property(e => e.CustNo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EMail");
            entity.Property(e => e.GstcustomerType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GSTCustomerType");
            entity.Property(e => e.GstregistrationNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GSTRegistrationNo");
            entity.Property(e => e.PanNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PAN_No");
            entity.Property(e => e.PinCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryContactNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StateCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("State_Code");
        });

        modelBuilder.Entity<FicciErpCustomerDetail>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__FICCI_ER__8CB286B97BBAB335");

            entity.ToTable("FICCI_ERP_CUSTOMER_DETAILS");

            entity.Property(e => e.CustomerId).HasColumnName("Customer_ID");
            entity.Property(e => e.AccountRemarks)
                .IsUnicode(false)
                .HasColumnName("Account_Remarks");
            entity.Property(e => e.ApprovedBy).IsUnicode(false);
            entity.Property(e => e.ApprovedOn).HasColumnType("datetime");
            entity.Property(e => e.CityCode)
                .IsUnicode(false)
                .HasColumnName("City_Code");
            entity.Property(e => e.CountryCode)
                .IsUnicode(false)
                .HasColumnName("Country_Code");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Createdby).IsUnicode(false);
            entity.Property(e => e.CusotmerNo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUSOTMER_NO");
            entity.Property(e => e.CusotmerRecordNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("([dbo].[FICCI_GETCUSTOMERNUMBERSEQ]())")
                .HasColumnName("CUSOTMER_RECORD_NO");
            entity.Property(e => e.CustoemrAddress)
                .IsUnicode(false)
                .HasColumnName("CUSTOEMR_ADDRESS");
            entity.Property(e => e.CustoemrAddress2)
                .IsUnicode(false)
                .HasColumnName("CUSTOEMR_ADDRESS2");
            entity.Property(e => e.CustomerClusterApprover)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_CLUSTER_APPROVER");
            entity.Property(e => e.CustomerClusterApproverDate)
                .HasColumnType("datetime")
                .HasColumnName("CUSTOMER_CLUSTER_APPROVER_DATE");
            entity.Property(e => e.CustomerClusterApproverRemarks)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_CLUSTER_APPROVER_REMARKS");
            entity.Property(e => e.CustomerContact)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_CONTACT");
            entity.Property(e => e.CustomerContactPerson)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_CONTACT_PERSON");
            entity.Property(e => e.CustomerCountryRegion)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_COUNTRY_REGION");
            entity.Property(e => e.CustomerEmailId)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_EMAIL_ID");
            entity.Property(e => e.CustomerGenBus)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_GEN_BUS");
            entity.Property(e => e.CustomerGstNo)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_GST_NO");
            entity.Property(e => e.CustomerLastname)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_LASTNAME");
            entity.Property(e => e.CustomerLocation)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_LOCATION");
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_NAME");
            entity.Property(e => e.CustomerPanNo)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_PAN_NO");
            entity.Property(e => e.CustomerPaymethod)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_PAYMETHOD");
            entity.Property(e => e.CustomerPhoneNo)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_PHONE_NO");
            entity.Property(e => e.CustomerPinCode)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_PIN_CODE");
            entity.Property(e => e.CustomerRemarks)
                .IsUnicode(false)
                .HasColumnName("Customer_Remarks");
            entity.Property(e => e.CustomerResponsibility)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_RESPONSIBILITY");
            entity.Property(e => e.CustomerSalepersonCode)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_SALEPERSON_CODE");
            entity.Property(e => e.CustomerSgApprover)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_SG_APPROVER");
            entity.Property(e => e.CustomerSgApproverDate)
                .HasColumnType("datetime")
                .HasColumnName("CUSTOMER_SG_APPROVER_DATE");
            entity.Property(e => e.CustomerSgRemaks)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_SG_REMAKS");
            entity.Property(e => e.CustomerStatus).HasColumnName("Customer_Status");
            entity.Property(e => e.CustomerTextArea)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_TEXT_AREA");
            entity.Property(e => e.CustomerTlApprover)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_TL_APPROVER");
            entity.Property(e => e.CustomerTlApproverDate)
                .HasColumnType("datetime")
                .HasColumnName("CUSTOMER_TL_APPROVER_DATE");
            entity.Property(e => e.CustomerTlApproverRemarks)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_TL_APPROVER_REMARKS");
            entity.Property(e => e.CustomerUpdatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CUSTOMER_UPDATED_ON");
            entity.Property(e => e.CustomerVatRegistration)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_VAT_REGISTRATION");
            entity.Property(e => e.GstCustomerType).HasColumnName("GST_Customer_Type");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.IsDraft)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.IsPending)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.LastUpdateBy).IsUnicode(false);
            entity.Property(e => e.StateCode)
                .IsUnicode(false)
                .HasColumnName("State_Code");

            entity.HasOne(d => d.GstCustomerTypeNavigation).WithMany(p => p.FicciErpCustomerDetails)
                .HasForeignKey(d => d.GstCustomerType)
                .HasConstraintName("FK_GST_Customer_Type");
        });

        modelBuilder.Entity<FicciErpProjectDetail>(entity =>
        {
            entity.HasKey(e => e.ProjectId).HasName("PK__FICCI_ER__1CB92E03C73EEE27");

            entity.ToTable("FICCI_ERP_PROJECT_DETAILS");

            entity.Property(e => e.ProjectId).HasColumnName("Project_Id");
            entity.Property(e => e.ChApprover)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("CH_APPROVER");
            entity.Property(e => e.DimensionCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Dimension_Code");
            entity.Property(e => e.FinanceApprover)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("FINANCE_APPROVER");
            entity.Property(e => e.ProjectActive)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("PROJECT_ACTIVE");
            entity.Property(e => e.ProjectCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PROJECT_CODE");
            entity.Property(e => e.ProjectDepartmentCode)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("PROJECT_DEPARTMENT_CODE");
            entity.Property(e => e.ProjectDepartmentName)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("PROJECT_DEPARTMENT_NAME");
            entity.Property(e => e.ProjectDivisionCode)
                .IsUnicode(false)
                .HasColumnName("PROJECT_DIVISION_CODE");
            entity.Property(e => e.ProjectDivisionName)
                .IsUnicode(false)
                .HasColumnName("PROJECT_DIVISION_NAME");
            entity.Property(e => e.ProjectName)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("PROJECT_NAME");
            entity.Property(e => e.SupportApprover)
                .IsUnicode(false)
                .HasColumnName("SUPPORT_APPROVER");
            entity.Property(e => e.TlApprover)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("TL_APPROVER");
        });

        modelBuilder.Entity<FicciImad>(entity =>
        {
            entity.HasKey(e => e.ImadId).HasName("PK_IMAD_ID");

            entity.ToTable("FICCI_IMAD");

            entity.Property(e => e.ImadId).HasColumnName("IMAD_ID");
            entity.Property(e => e.ImadActive).HasColumnName("IMAD_ACTIVE");
            entity.Property(e => e.ImadCreatedBy)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMAD_CREATED_BY");
            entity.Property(e => e.ImadCreatedOn)
                .HasComputedColumnSql("(getdate())", false)
                .HasColumnType("datetime")
                .HasColumnName("IMAD_CREATED_ON");
            entity.Property(e => e.ImadFileName)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("IMAD_FILE_NAME");
            entity.Property(e => e.ImadFileSize)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("IMAD_FILE_SIZE");
            entity.Property(e => e.ImadFileType)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("IMAD_FILE_TYPE");
            entity.Property(e => e.ImadFileUrl)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("IMAD_FILE_URL");
            entity.Property(e => e.ImadModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMAD_MODIFIED_BY");
            entity.Property(e => e.ImadModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("IMAD_MODIFIED_ON");
            entity.Property(e => e.ImadRecordNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMAD_RECORD_NO");
            entity.Property(e => e.ImadScreenName)
                .IsUnicode(false)
                .HasColumnName("IMAD_SCREEN_NAME");
            entity.Property(e => e.ResourceType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Resource_Type");
            entity.Property(e => e.ResourceTypeId).HasColumnName("Resource_Type_Id");
        });

        modelBuilder.Entity<FicciImem>(entity =>
        {
            entity.HasKey(e => e.ImemEmpid).HasName("PK_IMEM_EMPID");

            entity.ToTable("FICCI_IMEM");

            entity.Property(e => e.ImemEmpid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMEM_EMPID");
            entity.Property(e => e.ImemActive)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("IMEM_ACTIVE");
            entity.Property(e => e.ImemClusterEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMEM_CLUSTER_EMAIL");
            entity.Property(e => e.ImemClusterId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMEM_CLUSTER_ID");
            entity.Property(e => e.ImemCreatedBy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMEM_CREATED_BY");
            entity.Property(e => e.ImemCreatedOn)
                .HasComputedColumnSql("(getdate())", false)
                .HasColumnType("datetime")
                .HasColumnName("IMEM_CREATED_ON");
            entity.Property(e => e.ImemDepartment)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMEM_DEPARTMENT");
            entity.Property(e => e.ImemDepartmentHeadEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMEM_DEPARTMENT_HEAD_EMAIL");
            entity.Property(e => e.ImemDepartmentHeadId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMEM_DEPARTMENT_HEAD_ID");
            entity.Property(e => e.ImemDesignation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMEM_DESIGNATION");
            entity.Property(e => e.ImemEmail)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMEM_EMAIL");
            entity.Property(e => e.ImemEmploymentType)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMEM_EMPLOYMENT_TYPE");
            entity.Property(e => e.ImemId)
                .ValueGeneratedOnAdd()
                .HasColumnName("IMEM_ID");
            entity.Property(e => e.ImemJoiningDate)
                .HasColumnType("datetime")
                .HasColumnName("IMEM_JOINING_DATE");
            entity.Property(e => e.ImemLocation)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMEM_LOCATION");
            entity.Property(e => e.ImemManagerEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMEM_MANAGER_EMAIL");
            entity.Property(e => e.ImemManagerId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMEM_MANAGER_ID");
            entity.Property(e => e.ImemModifiedBy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMEM_MODIFIED_BY");
            entity.Property(e => e.ImemModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("IMEM_MODIFIED_ON");
            entity.Property(e => e.ImemName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMEM_NAME");
            entity.Property(e => e.ImemUsername)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMEM_USERNAME");
            entity.Property(e => e.ImemWorkLevel)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMEM_WORK_LEVEL");
        });

        modelBuilder.Entity<FicciImm>(entity =>
        {
            entity.HasKey(e => e.ImmsId).HasName("PK_IMMS_ID");

            entity.ToTable("FICCI_IMMS");

            entity.Property(e => e.ImmsId).HasColumnName("IMMS_ID");
            entity.Property(e => e.ImmsActive).HasColumnName("IMMS_ACTIVE");
            entity.Property(e => e.ImmsCategory)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMMS_CATEGORY");
            entity.Property(e => e.ImmsCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMMS_CODE");
            entity.Property(e => e.ImmsCreatedBy)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMMS_CREATED_BY");
            entity.Property(e => e.ImmsCreatedOn)
                .HasComputedColumnSql("(getdate())", false)
                .HasColumnType("datetime")
                .HasColumnName("IMMS_CREATED_ON");
            entity.Property(e => e.ImmsModifiedBy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMMS_MODIFIED_BY");
            entity.Property(e => e.ImmsModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("IMMS_MODIFIED_ON");
            entity.Property(e => e.ImmsValue)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMMS_VALUE");
        });

        modelBuilder.Entity<FicciImmd>(entity =>
        {
            entity.HasKey(e => e.ImmdId).HasName("PK_IMMD_ID");

            entity.ToTable("FICCI_IMMD");

            entity.Property(e => e.ImmdId).HasColumnName("IMMD_ID");
            entity.Property(e => e.ImmdActive).HasColumnName("IMMD_ACTIVE");
            entity.Property(e => e.ImmdCreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMMD_CREATED_BY");
            entity.Property(e => e.ImmdCreatedOn)
                .HasComputedColumnSql("(getdate())", false)
                .HasColumnType("datetime")
                .HasColumnName("IMMD_CREATED_ON");
            entity.Property(e => e.ImmdMailAttachmentFileName)
                .IsUnicode(false)
                .HasColumnName("IMMD_MAIL_ATTACHMENT_FILE_NAME");
            entity.Property(e => e.ImmdMailBody)
                .IsUnicode(false)
                .HasColumnName("IMMD_MAIL_BODY");
            entity.Property(e => e.ImmdMailCc)
                .IsUnicode(false)
                .HasColumnName("IMMD_MAIL_CC");
            entity.Property(e => e.ImmdMailRemarks)
                .IsUnicode(false)
                .HasColumnName("IMMD_MAIL_REMARKS");
            entity.Property(e => e.ImmdMailSentOn)
                .HasColumnType("datetime")
                .HasColumnName("IMMD_MAIL_SENT_ON");
            entity.Property(e => e.ImmdMailSubject)
                .IsUnicode(false)
                .HasColumnName("IMMD_MAIL_SUBJECT");
            entity.Property(e => e.ImmdMailTo)
                .IsUnicode(false)
                .HasColumnName("IMMD_MAIL_TO");
            entity.Property(e => e.ImmdModifiedBy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMMD_MODIFIED_BY");
            entity.Property(e => e.ImmdModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("IMMD_MODIFIED_ON");
            entity.Property(e => e.ImmdPiNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMMD_PI_NO");
            entity.Property(e => e.IsSent).HasDefaultValueSql("((0))");
            entity.Property(e => e.ResourceType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Resource_Type");
            entity.Property(e => e.ResourceTypeId).HasColumnName("Resource_Type_Id");
        });

        modelBuilder.Entity<FicciImpiHeader>(entity =>
        {
            entity.HasKey(e => e.ImpiHeaderId);

            entity.ToTable("FICCI_IMPI_HEADER");

            entity.Property(e => e.ImpiHeaderId).HasColumnName("IMPI_HEADER_ID");
            entity.Property(e => e.AccountApprover)
                .IsUnicode(false)
                .HasColumnName("Account_Approver");
            entity.Property(e => e.AccountApproverDate)
                .HasColumnType("datetime")
                .HasColumnName("Account_Approver_Date");
            entity.Property(e => e.AccountApproverRemarks)
                .IsUnicode(false)
                .HasColumnName("Account_Approver_Remarks");
            entity.Property(e => e.HeaderStatusId).HasColumnName("Header_StatusId");
            entity.Property(e => e.ImpiCancelBy)
                .IsUnicode(false)
                .HasColumnName("IMPI_CancelBy");
            entity.Property(e => e.ImpiCancelOn)
                .HasColumnType("datetime")
                .HasColumnName("IMPI_CancelOn");
            entity.Property(e => e.ImpiHeaderActive).HasColumnName("IMPI_HEADER_ACTIVE");
            entity.Property(e => e.ImpiHeaderAttachment).HasColumnName("IMPI_HEADER_ATTACHMENT");
            entity.Property(e => e.ImpiHeaderCancelRemarks)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CANCEL_REMARKS");
            entity.Property(e => e.ImpiHeaderClusterApprover)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CLUSTER_APPROVER");
            entity.Property(e => e.ImpiHeaderClusterApproverDate)
                .HasColumnType("datetime")
                .HasColumnName("IMPI_HEADER_CLUSTER_APPROVER_DATE");
            entity.Property(e => e.ImpiHeaderClusterApproverRemarks)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CLUSTER_APPROVER_REMARKS");
            entity.Property(e => e.ImpiHeaderCreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CREATED_BY");
            entity.Property(e => e.ImpiHeaderCreatedOn)
                .HasComputedColumnSql("(getdate())", false)
                .HasColumnType("datetime")
                .HasColumnName("IMPI_HEADER_CREATED_ON");
            entity.Property(e => e.ImpiHeaderCustomerAddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_ADDRESS");
            entity.Property(e => e.ImpiHeaderCustomerCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_CITY");
            entity.Property(e => e.ImpiHeaderCustomerCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_CODE");
            entity.Property(e => e.ImpiHeaderCustomerContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_CONTACT_PERSON");
            entity.Property(e => e.ImpiHeaderCustomerEmailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_EMAIL_ID");
            entity.Property(e => e.ImpiHeaderCustomerGstNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_GST_NO");
            entity.Property(e => e.ImpiHeaderCustomerName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_NAME");
            entity.Property(e => e.ImpiHeaderCustomerPhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_PHONE_NO");
            entity.Property(e => e.ImpiHeaderCustomerPinCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_PIN_CODE");
            entity.Property(e => e.ImpiHeaderCustomerState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_STATE");
            entity.Property(e => e.ImpiHeaderFinanceApprover)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_FINANCE_APPROVER");
            entity.Property(e => e.ImpiHeaderFinanceApproverDate)
                .HasColumnType("datetime")
                .HasColumnName("IMPI_HEADER_FINANCE_APPROVER_DATE");
            entity.Property(e => e.ImpiHeaderFinanceRemarks)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_FINANCE_REMARKS");
            entity.Property(e => e.ImpiHeaderGstNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_GST_NO");
            entity.Property(e => e.ImpiHeaderInvoiceType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_INVOICE_TYPE");
            entity.Property(e => e.ImpiHeaderModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_MODIFIED_BY");
            entity.Property(e => e.ImpiHeaderModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("IMPI_HEADER_MODIFIED_ON");
            entity.Property(e => e.ImpiHeaderPanNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PAN_NO");
            entity.Property(e => e.ImpiHeaderPaymentTerms)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PAYMENT_TERMS");
            entity.Property(e => e.ImpiHeaderPiNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PI_NO");
            entity.Property(e => e.ImpiHeaderProjectCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PROJECT_CODE");
            entity.Property(e => e.ImpiHeaderProjectDepartmentCode)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PROJECT_DEPARTMENT_CODE");
            entity.Property(e => e.ImpiHeaderProjectDepartmentName)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PROJECT_DEPARTMENT_NAME");
            entity.Property(e => e.ImpiHeaderProjectDivisionCode)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PROJECT_DIVISION_CODE");
            entity.Property(e => e.ImpiHeaderProjectDivisionName)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PROJECT_DIVISION_NAME");
            entity.Property(e => e.ImpiHeaderProjectName)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PROJECT_NAME");
            entity.Property(e => e.ImpiHeaderRecordNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("([dbo].[FICCI_GETPINUMBERSEQ]())")
                .HasColumnName("IMPI_HEADER_RECORD_NO");
            entity.Property(e => e.ImpiHeaderRemarks)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_REMARKS");
            entity.Property(e => e.ImpiHeaderStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_STATUS");
            entity.Property(e => e.ImpiHeaderSubmittedDate)
                .HasColumnType("datetime")
                .HasColumnName("IMPI_HEADER_SUBMITTED_DATE");
            entity.Property(e => e.ImpiHeaderSupportApprover)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_SUPPORT_APPROVER");
            entity.Property(e => e.ImpiHeaderTlApprover)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_TL_APPROVER");
            entity.Property(e => e.ImpiHeaderTlApproverDate)
                .HasColumnType("datetime")
                .HasColumnName("IMPI_HEADER_TL_APPROVER_DATE");
            entity.Property(e => e.ImpiHeaderTlApproverRemarks)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_TL_APPROVER_REMARKS");
            entity.Property(e => e.ImpiHeaderTotalInvoiceAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPI_HEADER_TOTAL_INVOICE_AMOUNT");
            entity.Property(e => e.IsDraft).HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<FicciImpiLine>(entity =>
        {
            entity.HasKey(e => e.ImpiLineId);

            entity.ToTable("FICCI_IMPI_LINE");

            entity.Property(e => e.ImpiLineId).HasColumnName("IMPI_LINE_ID");
            entity.Property(e => e.DocumentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ImpiDocumentNo)
                .IsUnicode(false)
                .HasColumnName("IMPI_DocumentNo");
            entity.Property(e => e.ImpiGlNo)
                .IsUnicode(false)
                .HasColumnName("IMPI_GL_No");
            entity.Property(e => e.ImpiGstBaseAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("IMPI_GST Base Amount");
            entity.Property(e => e.ImpiGstgroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_GSTGroupCode");
            entity.Property(e => e.ImpiGstgroupType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_GSTGroupType");
            entity.Property(e => e.ImpiHsnsaccode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HSNSACCode");
            entity.Property(e => e.ImpiLineActive).HasColumnName("IMPI_LINE_ACTIVE");
            entity.Property(e => e.ImpiLineAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("IMPI_LineAmount");
            entity.Property(e => e.ImpiLineCreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_LINE_CREATED_BY");
            entity.Property(e => e.ImpiLineCreatedOn)
                .HasComputedColumnSql("(getdate())", false)
                .HasColumnType("datetime")
                .HasColumnName("IMPI_LINE_CREATED_ON");
            entity.Property(e => e.ImpiLineModifiedBy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMPI_LINE_MODIFIED_BY");
            entity.Property(e => e.ImpiLineModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("IMPI_LINE_MODIFIED_ON");
            entity.Property(e => e.ImpiLineNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_LineNo");
            entity.Property(e => e.ImpiLinePiNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_LINE_PI_NO");
            entity.Property(e => e.ImpiLocationCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_LocationCode");
            entity.Property(e => e.ImpiNetTotal)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("IMPI_Net Total");
            entity.Property(e => e.ImpiQuantity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_Quantity");
            entity.Property(e => e.ImpiTotalGstAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("IMPI_Total GST Amount");
            entity.Property(e => e.ImpiType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_Type");
            entity.Property(e => e.ImpiUnitPrice)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("IMPI_UnitPrice");
            entity.Property(e => e.PiHeaderId).HasColumnName("PI_HeaderID");

            entity.HasOne(d => d.PiHeader).WithMany(p => p.FicciImpiLines)
                .HasForeignKey(d => d.PiHeaderId)
                .HasConstraintName("FK__FICCI_IMP__PI_He__2739D489");
        });

        modelBuilder.Entity<FicciImum>(entity =>
        {
            entity.HasKey(e => e.ImumId);

            entity.ToTable("FICCI_IMUM");

            entity.Property(e => e.ImumId).HasColumnName("IMUM_ID");
            entity.Property(e => e.ImumActive).HasColumnName("IMUM_ACTIVE");
            entity.Property(e => e.ImumCreatedBy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMUM_CREATED_BY");
            entity.Property(e => e.ImumCreatedOn)
                .HasComputedColumnSql("(getdate())", false)
                .HasColumnType("datetime")
                .HasColumnName("IMUM_CREATED_ON");
            entity.Property(e => e.ImumEmail)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMUM_EMAIL");
            entity.Property(e => e.ImumEmpid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMUM_EMPID");
            entity.Property(e => e.ImumModifiedBy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMUM_MODIFIED_BY");
            entity.Property(e => e.ImumModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("IMUM_MODIFIED_ON");
            entity.Property(e => e.ImumName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMUM_NAME");
            entity.Property(e => e.ImumPassword)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMUM_PASSWORD");
            entity.Property(e => e.ImumRole)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IMUM_ROLE");
            entity.Property(e => e.ImumUserid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMUM_USERID");
            entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Role).WithMany(p => p.FicciImums)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Role_RoleId");
        });

        modelBuilder.Entity<FicciImwd>(entity =>
        {
            entity.HasKey(e => e.ImwdId);

            entity.ToTable("FICCI_IMWD");

            entity.Property(e => e.ImwdId).HasColumnName("IMWD_ID");
            entity.Property(e => e.ImwdCreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMWD_CREATED_BY");
            entity.Property(e => e.ImwdCreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("IMWD_CREATED_ON");
            entity.Property(e => e.ImwdInitiatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMWD_INITIATED_BY");
            entity.Property(e => e.ImwdPendingAt)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMWD_PENDING_AT");
            entity.Property(e => e.ImwdPendingEmailAt)
                .IsUnicode(false)
                .HasColumnName("IMWD_Pending_Email_AT");
            entity.Property(e => e.ImwdRemarks)
                .IsUnicode(false)
                .HasColumnName("IMWD_REMARKS");
            entity.Property(e => e.ImwdRole)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMWD_ROLE");
            entity.Property(e => e.ImwdScreenName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMWD_SCREEN_NAME");
            entity.Property(e => e.ImwdStatus)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMWD_STATUS");
            entity.Property(e => e.ImwdType).HasColumnName("IMWD_Type");
        });

        modelBuilder.Entity<GstCustomerType>(entity =>
        {
            entity.HasKey(e => e.CustomerTypeId).HasName("PK__GST_Cust__0ECA2EDB4C8B9D7E");

            entity.ToTable("GST_Customer_Type");

            entity.Property(e => e.CustomerTypeId).HasColumnName("Customer_Type_Id");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CustomerTypeName)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Customer_Type_Name");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<Gstgroup>(entity =>
        {
            entity.HasKey(e => e.GroupId).HasName("PK__GSTGroup__149AF36AF8805188");

            entity.ToTable("GSTGroup");

            entity.Property(e => e.GroupCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<Hsnsac>(entity =>
        {
            entity.HasKey(e => e.HsnId).HasName("PK__HSNSAC__957B8D78A0D44BD8");

            entity.ToTable("HSNSAC");

            entity.Property(e => e.HsnCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HsnGroup).IsUnicode(false);
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Location__3214EC07D13B23CA");

            entity.ToTable("Location");

            entity.Property(e => e.LocationCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LocationName).IsUnicode(false);
        });

        modelBuilder.Entity<PostCode>(entity =>
        {
            entity.HasKey(e => e.PostCodeId).HasName("PK__PostCode__8579AD92B0A8FCA2");

            entity.ToTable("PostCode");

            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.PostCode1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PostCode");
        });

        modelBuilder.Entity<State>(entity =>
        {
            entity.HasKey(e => e.StateId).HasName("PK__States__C3BA3B3AD10A10F8");

            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.StateCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StateName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<StatusMaster>(entity =>
        {
            entity.HasKey(e => e.StatusId).HasName("PK__StatusMa__C8EE20637A1BDE63");

            entity.ToTable("StatusMaster");

            entity.Property(e => e.StatusName).IsUnicode(false);
        });

        modelBuilder.Entity<TblCategoryList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tbl_Cate__3214EC070A91C007");

            entity.ToTable("tbl_Category_List");

            entity.Property(e => e.CategoryName)
                .HasMaxLength(100)
                .HasColumnName("Category_Name");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Createdby).HasMaxLength(50);
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.UpdatedBy).HasMaxLength(50);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblConfigurationMaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tbl_Conf__3214EC079D3B5B88");

            entity.ToTable("tbl_Configuration_master");

            entity.Property(e => e.CCode)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("C_Code");
            entity.Property(e => e.CValue)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("C_Value");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Createdby).HasMaxLength(50);
            entity.Property(e => e.UpdatedBy).HasMaxLength(50);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Category).WithMany(p => p.TblConfigurationMasters)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__tbl_Confi__Categ__07C12930");
        });

        modelBuilder.Entity<TblFicciRole>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__tbl_FICC__D80BB0933DB0A6D8");

            entity.ToTable("tbl_FICCI_Role");

            entity.Property(e => e.RoleId).HasColumnName("Role_id");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAdmin).HasDefaultValueSql("((0))");
            entity.Property(e => e.LastUpdateOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Role_name");
        });

        modelBuilder.Entity<Userloginlog>(entity =>
        {
            entity.HasKey(e => e.UserLoginLogId).HasName("PK__Userlogi__AB731A61DD30867F");

            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.LoginDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LoginId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwCustomerApprovalList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VW_CUSTOMER_APPROVAL_LIST");

            entity.Property(e => e.ApproverEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Approver_Email");
            entity.Property(e => e.CityCode)
                .IsUnicode(false)
                .HasColumnName("City_Code");
            entity.Property(e => e.CountryCode)
                .IsUnicode(false)
                .HasColumnName("Country_Code");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Createdby).IsUnicode(false);
            entity.Property(e => e.CusotmerNo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUSOTMER_NO");
            entity.Property(e => e.CustoemrAddress)
                .IsUnicode(false)
                .HasColumnName("CUSTOEMR_ADDRESS");
            entity.Property(e => e.CustoemrAddress2)
                .IsUnicode(false)
                .HasColumnName("CUSTOEMR_ADDRESS2");
            entity.Property(e => e.CustomerClusterApprover)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_CLUSTER_APPROVER");
            entity.Property(e => e.CustomerContact)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_CONTACT");
            entity.Property(e => e.CustomerContactPerson)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_CONTACT_PERSON");
            entity.Property(e => e.CustomerEmailId)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_EMAIL_ID");
            entity.Property(e => e.CustomerGstNo)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_GST_NO");
            entity.Property(e => e.CustomerId).HasColumnName("Customer_ID");
            entity.Property(e => e.CustomerLastname)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_LASTNAME");
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_NAME");
            entity.Property(e => e.CustomerPanNo)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_PAN_NO");
            entity.Property(e => e.CustomerPhoneNo)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_PHONE_NO");
            entity.Property(e => e.CustomerPinCode)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_PIN_CODE");
            entity.Property(e => e.CustomerSgApprover)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_SG_APPROVER");
            entity.Property(e => e.CustomerStatus).HasColumnName("Customer_Status");
            entity.Property(e => e.CustomerTlApprover)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_TL_APPROVER");
            entity.Property(e => e.CustomerTypeName)
                .IsUnicode(false)
                .HasColumnName("Customer_Type_Name");
            entity.Property(e => e.CustomerUpdatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CUSTOMER_UPDATED_ON");
            entity.Property(e => e.GstCustomerType).HasColumnName("GST_Customer_Type");
            entity.Property(e => e.LastUpdateBy).IsUnicode(false);
            entity.Property(e => e.StateCode)
                .IsUnicode(false)
                .HasColumnName("State_Code");
            entity.Property(e => e.StatusName).IsUnicode(false);
        });

        modelBuilder.Entity<VwInvoiceApprovalList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VW_INVOICE_APPROVAL_LIST");

            entity.Property(e => e.AccountApprover)
                .IsUnicode(false)
                .HasColumnName("Account_approver");
            entity.Property(e => e.AccountApproverDate)
                .HasColumnType("datetime")
                .HasColumnName("Account_Approver_Date");
            entity.Property(e => e.AccountApproverRemarks)
                .IsUnicode(false)
                .HasColumnName("Account_Approver_Remarks");
            entity.Property(e => e.ApproverEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Approver_Email");
            entity.Property(e => e.HeaderStatusId).HasColumnName("Header_StatusId");
            entity.Property(e => e.ImpiHeaderAttachment).HasColumnName("IMPI_HEADER_ATTACHMENT");
            entity.Property(e => e.ImpiHeaderClusterApprover)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CLUSTER_APPROVER");
            entity.Property(e => e.ImpiHeaderClusterApproverDate)
                .HasColumnType("datetime")
                .HasColumnName("IMPI_HEADER_CLUSTER_APPROVER_DATE");
            entity.Property(e => e.ImpiHeaderClusterApproverRemarks)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CLUSTER_APPROVER_REMARKS");
            entity.Property(e => e.ImpiHeaderCreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CREATED_BY");
            entity.Property(e => e.ImpiHeaderCustomerAddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_ADDRESS");
            entity.Property(e => e.ImpiHeaderCustomerCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_CITY");
            entity.Property(e => e.ImpiHeaderCustomerCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_CODE");
            entity.Property(e => e.ImpiHeaderCustomerContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_CONTACT_PERSON");
            entity.Property(e => e.ImpiHeaderCustomerEmailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_EMAIL_ID");
            entity.Property(e => e.ImpiHeaderCustomerGstNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_GST_NO");
            entity.Property(e => e.ImpiHeaderCustomerName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_NAME");
            entity.Property(e => e.ImpiHeaderCustomerPhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_PHONE_NO");
            entity.Property(e => e.ImpiHeaderCustomerPinCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_PIN_CODE");
            entity.Property(e => e.ImpiHeaderCustomerState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_CUSTOMER_STATE");
            entity.Property(e => e.ImpiHeaderFinanceApprover)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_FINANCE_APPROVER");
            entity.Property(e => e.ImpiHeaderFinanceApproverDate)
                .HasColumnType("datetime")
                .HasColumnName("IMPI_HEADER_FINANCE_APPROVER_DATE");
            entity.Property(e => e.ImpiHeaderFinanceRemarks)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_FINANCE_REMARKS");
            entity.Property(e => e.ImpiHeaderGstNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_GST_NO");
            entity.Property(e => e.ImpiHeaderId).HasColumnName("IMPI_HEADER_ID");
            entity.Property(e => e.ImpiHeaderInvoiceType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_INVOICE_TYPE");
            entity.Property(e => e.ImpiHeaderModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("IMPI_HEADER_MODIFIED_ON");
            entity.Property(e => e.ImpiHeaderPanNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PAN_NO");
            entity.Property(e => e.ImpiHeaderPaymentTerms)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PAYMENT_TERMS");
            entity.Property(e => e.ImpiHeaderPiNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PI_NO");
            entity.Property(e => e.ImpiHeaderProjectCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PROJECT_CODE");
            entity.Property(e => e.ImpiHeaderProjectDepartmentCode)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PROJECT_DEPARTMENT_CODE");
            entity.Property(e => e.ImpiHeaderProjectDepartmentName)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PROJECT_DEPARTMENT_NAME");
            entity.Property(e => e.ImpiHeaderProjectDivisionCode)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PROJECT_DIVISION_CODE");
            entity.Property(e => e.ImpiHeaderProjectDivisionName)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PROJECT_DIVISION_NAME");
            entity.Property(e => e.ImpiHeaderProjectName)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_PROJECT_NAME");
            entity.Property(e => e.ImpiHeaderRemarks)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_REMARKS");
            entity.Property(e => e.ImpiHeaderSubmittedDate)
                .HasColumnType("datetime")
                .HasColumnName("IMPI_HEADER_SUBMITTED_DATE");
            entity.Property(e => e.ImpiHeaderTlApprover)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_TL_APPROVER");
            entity.Property(e => e.ImpiHeaderTlApproverDate)
                .HasColumnType("datetime")
                .HasColumnName("IMPI_HEADER_TL_APPROVER_DATE");
            entity.Property(e => e.ImpiHeaderTlApproverRemarks)
                .IsUnicode(false)
                .HasColumnName("IMPI_HEADER_TL_APPROVER_REMARKS");
            entity.Property(e => e.ImpiHeaderTotalInvoiceAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPI_HEADER_TOTAL_INVOICE_AMOUNT");
            entity.Property(e => e.StatusName).IsUnicode(false);
        });

        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}